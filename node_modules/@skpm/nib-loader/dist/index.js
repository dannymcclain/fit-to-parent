'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.raw = undefined;
exports.default = loader;

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _loaderUtils = require('loader-utils');

var _loaderUtils2 = _interopRequireDefault(_loaderUtils);

var _schemaUtils = require('schema-utils');

var _schemaUtils2 = _interopRequireDefault(_schemaUtils);

var _options = require('./options.json');

var _options2 = _interopRequireDefault(_options);

var _compileNib = require('./compile-nib');

var _compileNib2 = _interopRequireDefault(_compileNib);

var _wrappedNibClass = require('./wrapped-nib-class');

var _wrappedNibClass2 = _interopRequireDefault(_wrappedNibClass);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable
  multiline-ternary,
*/
function loader(content) {
  var _this = this;

  if (!this.emitFile) throw new Error('Nib Loader\n\nemitFile is required from module system');

  var options = _loaderUtils2.default.getOptions(this) || {};

  (0, _schemaUtils2.default)(_options2.default, options, 'Nib Loader');

  var context = options.context || this.rootContext || this.options && this.options.context;

  var url = _loaderUtils2.default.interpolateName(this, options.name, {
    context,
    content,
    regExp: options.regExp
  });

  var parsedPath = _path2.default.parse(this.resourcePath);

  if (parsedPath.ext === '.xib') {
    // will be compiled to nib so change the ext
    url = url.replace(/\.xib$/, '.nib');
  }

  var outputPath = url;

  if (options.outputPath) {
    if (typeof options.outputPath === 'function') {
      outputPath = options.outputPath(url);
    } else {
      outputPath = _path2.default.posix.join(options.outputPath, url);
    }
  }

  if (options.useRelativePath) {
    var filePath = this.resourcePath;

    var issuer = options.context ? context : this._module && this._module.issuer && this._module.issuer.context;

    var relativeUrl = issuer && _path2.default.relative(issuer, filePath).split(_path2.default.sep).join('/');

    var relativePath = relativeUrl && `${_path2.default.dirname(relativeUrl)}/`;
    // eslint-disable-next-line no-bitwise
    if (~relativePath.indexOf('../')) {
      outputPath = _path2.default.posix.join(outputPath, relativePath, url);
    } else {
      outputPath = _path2.default.posix.join(relativePath, url);
    }
  }

  var publicPath = `__webpack_public_path__ + ${JSON.stringify(outputPath)}`;

  if (options.publicPath) {
    if (typeof options.publicPath === 'function') {
      publicPath = options.publicPath(url);
    } else if (options.publicPath.endsWith('/')) {
      publicPath = options.publicPath + url;
    } else {
      publicPath = `${options.publicPath}/${url}`;
    }

    if (!options.raw) {
      publicPath = JSON.stringify(publicPath);
    }
  }

  if (options.emitFile === undefined || options.emitFile) {
    if (parsedPath.ext === '.nib') {
      // we already have a nib so no need to compile the xib
      this.emitFile(outputPath, content);
      return (0, _wrappedNibClass2.default)(publicPath);
    }

    var callback = this.async();

    var nibPath = _path2.default.join(_os2.default.tmpdir(), `webpack-${parsedPath.name}.nib`);

    (0, _compileNib2.default)(this, nibPath, function (error) {
      if (error) {
        return callback(new Error(`Error compiling nib: ${error.message}`));
      }

      return _fs2.default.readFile(nibPath, function (err, result) {
        try {
          _fs2.default.unlinkSync(nibPath);
        } catch (_err) {
          // don't care
        }

        if (error) {
          return callback(new Error(`Error reading compiled nib: ${error.message}`));
        }
        _this.emitFile(outputPath, result);
        return callback(null, (0, _wrappedNibClass2.default)(publicPath));
      });
    });
    return undefined;
  }

  return (0, _wrappedNibClass2.default)(publicPath);
}

var raw = exports.raw = true;